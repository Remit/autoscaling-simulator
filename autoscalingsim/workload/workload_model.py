import json
import pandas as pd

from .regional_workload_model import RegionalWorkloadModel

from ..utils.error_check import ErrorChecker

class WorkloadModel:

    """
    Wraps regional workload generation models and combines requests generated by
    them. Conducts initial parsing of the configuration file.
    """

    def __init__(self,
                 simulation_step : pd.Timedelta = pd.Timedelta(10, unit = 'ms'),
                 filename : str,     
                 reqs_types_ratios : dict = None):

        self.region_models = {}

        if filename is None:
            raise ValueError('Configuration file not provided for the WorkloadModel.')
        else:
            with open(filename) as f:
                config = json.load(f)
                regions_configs = ErrorChecker.key_check_and_load('regions_configs', config)

                for region_config in regions_configs:
                    region_name = ErrorChecker.key_check_and_load('region_name', region_config)
                    seasonal_pattern = ErrorChecker.key_check_and_load('seasonal_pattern', region_config, 'region_name', region_name)
                    workloads_configs = ErrorChecker.key_check_and_load('workloads_configs', region_config, 'region_name', region_name)
                    self.region_models[region_name] = RegionalWorkloadModel(region_name,
                                                                            seasonal_pattern,
                                                                            workloads_configs,
                                                                            simulation_step)

    def generate_requests(self,
                          timestamp : pd.Timestamp):

        """
        Combines requests generated across different region into a single list.
        The region information is stored in the request itself.
        """

        joint_reqs = []
        for region_workload_model in self.region_models.values():
            joint_reqs.extend(region_workload_model.generate_requests(timestamp))

        return joint_reqs

    def get_generated_workload(self):

        workload = {}
        for region_name, region_workload_model in self.region_models.items():
            workload[region_name] = region_workload_model.workload

        return workload
